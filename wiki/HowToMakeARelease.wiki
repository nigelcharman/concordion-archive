#summary How to make a release of Concordion
#labels Phase-Deploy

= Introduction =
The project is using the [https://github.com/bmuschko/gradle-nexus-plugin Nexus] and [https://github.com/townsfolk/gradle-release release] plugins for Gradle.

= Pre-conditions =
 * A GPG client is installed on your command line path. For more information, please refer to http://www.gnupg.org/.
 * You have created your GPG keys and distributed your public key to hkp://pool.sks-keyservers.net/. For more information, please refer to [https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven How To Generate PGP Signatures With Maven].
 * You have a [https://issues.sonatype.org Sonatype JIRA account], which has [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-3.CreateaJIRAticket approval] for publishing to the Concordion project.
 * You have configured your gradle.properties, typically located in your ~/.gradle directory:

{{{
signing.keyId=your-key-id
signing.password=your-key-password
signing.secretKeyRingFile=your-home-dir/.gnupg/secring.gpg

nexusUsername=your-jira-username
nexusPassword=your-jira-password
}}}

  where _your-key-id_ and _your-key-password_ relate to your GPG key, _your-home-dir_ is set to the location of your home directory which contains the `.gnupg` sub-directory, and  _your-jira-username_ and _your-jira-password_ are the credentials for your Sonatype JIRA account.

= Publishing a snapshot =
 * Ensure the `gradle.properties` file contains the correct version, and ends with `-SNAPSHOT`.
 * Commit and push all the changes to !GitHub.
 * Run `gradle uploadArchives`.
 * The snapshot should appear under https://oss.sonatype.org/content/repositories/snapshots/org/concordion/concordion.


= Performing a release =
 * Commit and push all the changes to !GitHub. (The release plugin will fail if you have any changes that aren't committed and pushed.)
 * Run `gradle release`. During this build, Gradle will prompt for the version number of the release, and for the next version number to use. See [https://github.com/townsfolk/gradle-release#introduction here] for the steps taken by the release plugin. 

== Releasing the artifacts to Maven Central ==
The `gradle release` task also triggers the `uploadArchives` task to upload the artifacts to Sonatype's OSS staging repository. 

To complete the release, you must Close and Release the artifacts:

 # Login to the [https://oss.sonatype.org/ Nexus UI].
 # Go to Staging Repositories page.
 # Select the staging repository for org.concordion.
 # Click the Close button.
 # After it has closed the repository, select the closed staging repository for org.concordion.
 # Click the Release button.

For full details, see the [https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8a.ReleaseIt Sonatype OSS Maven Repository Usage Guide].

= Rolling back a release =
 * Reset the version number in gradle.properties, and commit and push to !GitHub.
 * If the release was pushed to Sonatype OSS, you must Drop the artifacts:
   # Login to the [https://oss.sonatype.org/ Nexus UI].
   # Go to Staging Repositories page.
   # Select the staging repository for org.concordion.
   # Click the Drop button.